package view

import "github.com/dgf/go-ssr-x/entity"
import "time"

templ TaskCreateForm() {
	<form
		hx-post="tasks"
		hx-target="this"
		hx-swap="outerHTML"
		hx-select-oob="#snackbar:afterbegin"
		hx-disabled-elt="button"
		class="container rounded-lg bg-stone-200 shadow-lg dark:bg-stone-800"
	>
		<div class="flex flex-col">
			<label for="subject" class="my-2">Subject</label>
			<input
				name="subject"
				required
				minlength="3"
				maxlength="255"
				class="rounded-sm px-2 py-2 shadow-sm dark:bg-stone-700"
			/>
			<label for="dueDate" class="my-2">Due Date</label>
			<input
				name="dueDate"
				type="date"
				value={ time.Now().Add(3 * 24 * time.Hour).Format(time.DateOnly) }
				min={ time.Now().Format(time.DateOnly) }
				class="rounded-sm px-2 py-2 shadow-sm dark:bg-stone-700"
			/>
			<label for="description" class="my-2">Description</label>
			<textarea name="description" rows="3" class="rounded-sm px-2 py-2 shadow-sm dark:bg-stone-700"></textarea>
		</div>
		<div class="flex flex-row justify-between py-3">
			<div>
				<button
					id="add-task"
					class="rounded-full bg-sky-500 px-3 py-1 font-semibold shadow-lg hover:bg-sky-400 disabled:opacity-90 dark:bg-sky-800 dark:hover:bg-sky-700"
				>
					Add Task
				</button>
				<button
					hx-get="tasks"
					class="rounded-full bg-stone-300 px-3 py-1 font-semibold shadow-lg hover:bg-stone-200 dark:bg-stone-700 dark:hover:bg-stone-600"
				>
					Cancel
				</button>
			</div>
			<div class="htmx-indicator px-2 py-1">Sending ...</div>
		</div>
	</form>
}

templ TaskRow(task entity.Task) {
	<tr
		id={ task.Id.String() }
		data-created-at={ task.CreatedAt.Format(time.DateTime) }
		class="even:bg-stone-300 dark:even:bg-stone-700"
	>
		<td class="p-2 proportional-nums">
			{ dateTime(task.CreatedAt) }
		</td>
		<td class="p-2 proportional-nums">
			{ date(task.DueDate) }
		</td>
		<td class="p-2">{ task.Subject }</td>
		<td class="p-2">
			<button
				hx-delete={ "tasks/" + task.Id.String() }
				class="h-8 w-8 rounded-full bg-orange-400 px-2 py-1 shadow-lg hover:bg-orange-300 dark:bg-rose-700 dark:hover:bg-rose-600"
			>
				@trash()
			</button>
		</td>
	</tr>
}

templ TaskRows(tasks []entity.Task) {
	for _, task := range tasks {
		@TaskRow(task)
	}
}

templ TaskTable(tasks []entity.Task) {
	<div class="py-3">
		<table class="w-full">
			<thead class="bg-stone-400 text-left font-semibold dark:bg-stone-600">
				<tr>
					<th class="p-2">Created At</th>
					<th class="p-2">Due Date</th>
					<th class="p-2">Subject</th>
					<th class="p-2"></th>
				</tr>
			</thead>
			<tbody id="task-rows" hx-confirm="Are you sure?" hx-target="closest tr" hx-swap="outerHTML swap:1s">
				@TaskRows(tasks)
			</tbody>
		</table>
	</div>
}

templ TasksSection(tasks []entity.Task, order string) {
	<section hx-target="this" hx-swap="outerHTML" class="container rounded-lg bg-stone-200 shadow-lg dark:bg-stone-800">
		<div class="flex flex-row items-center justify-between py-3">
			<div class="py-1">
				if len(tasks) > 0 {
					filter
				}
			</div>
			<div class="py-1">
				if len(tasks) > 0 {
					<form autocomplete="off">
						<select
							name="order"
							hx-get="tasks/rows"
							hx-target="#task-rows"
							hx-swap="innerHTML"
							hx-indicator="#task-loading"
							class="rounded-lg px-2 py-2 shadow-lg dark:bg-stone-700"
						>
							@optionList(order, []Option{
								{value: "created-desc", label: "Newest (created)"},
								{value: "created-asc", label: "Oldest (created)"},
								{value: "due-date-asc", label: "Urgent (due date)"},
								{value: "due-date-desc", label: "Relaxed (due date)"},
								{value: "subject-asc", label: "Subject (alphabetical)"},
								{value: "subject-desc", label: "Subject (reverse)"},
							})
						</select>
					</form>
				}
			</div>
			<button
				id="add-task"
				hx-get="tasks/new"
				class="rounded-full bg-sky-500 px-3 py-1 font-semibold shadow-lg hover:bg-sky-400 disabled:opacity-90 dark:bg-sky-800 dark:hover:bg-sky-700"
			>
				Add Task
			</button>
		</div>
		if len(tasks) > 0 {
			@TaskTable(tasks)
		}
	</section>
}

templ TasksSectionWithNotifyOOB(tasks []entity.Task, order string, message string) {
	@SuccessNotify(message)
	@TasksSection(tasks, order)
}
